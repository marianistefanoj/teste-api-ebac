{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-08-23T01:39:04.293Z",
    "end": "2023-08-23T01:39:05.023Z",
    "duration": 730,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cb73f621-217f-4fa1-a10c-fd8abd3d2458",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api-commands.cy.js",
      "file": "cypress\\e2e\\exercicio-api-commands.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 154,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.validaEndpointAPI('usuarios', _usuario.default);",
              "err": {},
              "uuid": "5ac59807-eeac-41fb-807c-df1eacc1e493",
              "parentUUID": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários GET - Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//sempre utilizado para fazer as requisições \ncy.getEndpoint('usuarios').then(response => {\n  //response = retorno da request\n  expect(response.status).to.equal(200); //espera que o status code do request seja 200\n  expect(response.body.usuarios[0].nome).not.equal('');\n});",
              "err": {},
              "uuid": "c70fd0dd-8fc3-4ad3-adab-572a123ea2cc",
              "parentUUID": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários POST - Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 107,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastraUsuario(token, usuario, email, \"teste\", \"true\").then(response => {\n  expect(response.status).to.be.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n  id = response.body._id;\n  cy.log(response.body._id);\n});",
              "err": {},
              "uuid": "a8e9410c-4035-4f70-acf1-dab34fd70e40",
              "parentUUID": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários POST - Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 61,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastraUsuario(token, usuario, usuario, \"teste\", \"true\").then(response => {\n  expect(response.status).to.be.equal(400), expect(response.body.email).to.equal('email deve ser um email válido');\n});",
              "err": {},
              "uuid": "e1da3694-abf0-4661-b23b-40dc6781d1c6",
              "parentUUID": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários PUT - Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let randomNew = Math.floor(Math.random() * 1000000);\nlet usuarioNew = `Usuario Novo ${random}`;\nlet emailNew = `UsuarioNovo${random}`;\ncy.log(id);\ncy.editaUsuarioCadastrado(token, id, usuarioNew, emailNew, \"teste\", \"true\").then(response => {\n  expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n});",
              "err": {},
              "uuid": "aa61e6a2-eeb3-49ed-be9a-fc9f1f519a56",
              "parentUUID": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários DELETE - Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 111,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.log(id); //log do id do usuario criado , depois alterado, e por fim deletado\ncy.deletaRegistroEndpoint(token, \"usuarios\", id).then(response => {\n  expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro excluído com sucesso');\n});",
              "err": {},
              "uuid": "5062ab02-9069-4724-bd9b-07a858317a97",
              "parentUUID": "f478b634-d11e-41fa-bcec-35e851cf2b6f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ac59807-eeac-41fb-807c-df1eacc1e493",
            "c70fd0dd-8fc3-4ad3-adab-572a123ea2cc",
            "a8e9410c-4035-4f70-acf1-dab34fd70e40",
            "e1da3694-abf0-4661-b23b-40dc6781d1c6",
            "aa61e6a2-eeb3-49ed-be9a-fc9f1f519a56",
            "5062ab02-9069-4724-bd9b-07a858317a97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 664,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}