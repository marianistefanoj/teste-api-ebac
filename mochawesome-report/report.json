{
  "stats": {
    "suites": 9,
    "tests": 37,
    "passes": 37,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 37,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-08-18T00:56:47.291Z",
    "end": "2023-08-23T00:14:05.718Z",
    "duration": 429438427
  },
  "results": [
    {
      "uuid": "dd82da15-b615-4613-9477-45cb25a29f3a",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4c1b19fd-a2c8-4a94-ae37-feb9dfe9af2a",
          "title": "Login - Teste da API ServRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login - Teste da API ServRest Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 182,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200), expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "8797d5eb-da9b-4012-aa26-fa5374a51409",
              "parentUUID": "4c1b19fd-a2c8-4a94-ae37-feb9dfe9af2a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8797d5eb-da9b-4012-aa26-fa5374a51409"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 182,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "52b32076-f5d0-4244-8a32-5993d80c0abb",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
          "title": "Testes da funcionalidade produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da funcionalidade produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 169,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "c908055e-b6bc-4994-ad63-d4b8fbe906d8",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Deve listar todos os produtos cadastrados",
              "fullTitle": "Testes da funcionalidade produtos GET - Deve listar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 96,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/produtos'\n}).then(response => {\n  //expect(response.body.produtos[0].nome).to.equal('Logitech MX Vertical'),\n  expect(response.status).to.equal(200), expect(response.body.produtos[0].nome).not.equal(''), expect(response.body).to.have.property('produtos'), expect(response.duration).to.be.lessThan(100);\n});",
              "err": {},
              "uuid": "484d391c-7b0b-4d86-b8bd-af68543cfd05",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Cadastrar produto",
              "fullTitle": "Testes da funcionalidade produtos POST - Cadastrar produto",
              "timedOut": null,
              "duration": 75,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.be.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "6f51defa-4af8-409a-b9e9-09ef49348caa",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da funcionalidade produtos PUT - Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 76,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//usou comando personalizado para tentar cadastrar um produto novo e fez as validações de que o mesmo ja havia sido cadastrado anteriormente\ncy.cadastrarProduto(token, produto, 100, produto, 10).then(response => {\n  expect(response.status).to.be.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "97dbc614-4ced-4eff-98d5-fc0b60a8d787",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve editar um produto ja cadastrado",
              "fullTitle": "Testes da funcionalidade produtos PUT - Deve editar um produto ja cadastrado",
              "timedOut": null,
              "duration": 124,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\n//faz o get direto no request(''), depois atribui o valor do id do produto 0 do array para variavel para ser usado posteriormente\ncy.request('/produtos').then(response => {\n  cy.log(response.body.produtos[0]._id);\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 220,\n      \"descricao\": produto,\n      \"quantidade\": 10\n    }\n  }).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "6bf27702-397e-4997-8a80-c2ad6b0d5352",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Alterar produto cadastrado previamente com comando personalizado",
              "fullTitle": "Testes da funcionalidade produtos PUT - Alterar produto cadastrado previamente com comando personalizado",
              "timedOut": null,
              "duration": 97,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoNovo = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\nlet produto = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\n//Cadastrando produto\ncy.cadastrarProduto(token, produtoNovo, 100, produtoNovo, 10).then(response => {\n  let id = response.body._id;\n  cy.log(response.body._id);\n  cy.request({\n    method: 'PUT',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 220,\n      \"descricao\": produto,\n      \"quantidade\": 10\n    }\n  }).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "dff910c0-c08e-4de6-af94-448402da7be5",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Deve excluir um produto cadastrado e editado anteriormente com comando personalizado",
              "fullTitle": "Testes da funcionalidade produtos DELETE - Deve excluir um produto cadastrado e editado anteriormente com comando personalizado",
              "timedOut": null,
              "duration": 99,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoNovo = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produtoNovo, 100, produtoNovo, 10).then(response => {\n  let id = response.body._id;\n  cy.log(response.body._id);\n  cy.deletarProduto(token, id).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "ab4f7e16-9727-427e-b5b3-749a49f93e56",
              "parentUUID": "f65fa30a-e58f-4cd1-ab25-37f6df3b5de2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c908055e-b6bc-4994-ad63-d4b8fbe906d8",
            "484d391c-7b0b-4d86-b8bd-af68543cfd05",
            "6f51defa-4af8-409a-b9e9-09ef49348caa",
            "97dbc614-4ced-4eff-98d5-fc0b60a8d787",
            "6bf27702-397e-4997-8a80-c2ad6b0d5352",
            "dff910c0-c08e-4de6-af94-448402da7be5",
            "ab4f7e16-9727-427e-b5b3-749a49f93e56"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 736,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8c330bdb-a752-42cf-9cf5-f4c0f40f908c",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 77,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "93d5b429-ffc5-438a-8dcd-bf48aa8b4f2f",
              "parentUUID": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 64,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "6bc8494e-5aab-42d4-8ee3-05e99d21faf9",
              "parentUUID": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "e65b15c0-77e1-405d-9905-730fb346319c",
              "parentUUID": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 69,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "a6ae271d-585c-474e-93cd-9124ba38ca5a",
              "parentUUID": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 70,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "01592875-de89-43fe-b5fd-132e4ee9ecf8",
              "parentUUID": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 75,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "42361215-2d7b-4ad0-aec8-655c289e2258",
              "parentUUID": "e73871a5-03d9-4135-81f2-efd6b3cfb89f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "93d5b429-ffc5-438a-8dcd-bf48aa8b4f2f",
            "6bc8494e-5aab-42d4-8ee3-05e99d21faf9",
            "e65b15c0-77e1-405d-9905-730fb346319c",
            "a6ae271d-585c-474e-93cd-9124ba38ca5a",
            "01592875-de89-43fe-b5fd-132e4ee9ecf8",
            "42361215-2d7b-4ad0-aec8-655c289e2258"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 442,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "880032ed-c92a-4ac2-bb93-f6e99283ddc3",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f4f4c9bb-70df-4599-a247-fcf746fd6bda",
          "title": "Login - Teste da API ServRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login - Teste da API ServRest Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 209,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200), expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "b436ab2b-00cc-49e8-8215-c67f2f2ef6b1",
              "parentUUID": "f4f4c9bb-70df-4599-a247-fcf746fd6bda",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b436ab2b-00cc-49e8-8215-c67f2f2ef6b1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 209,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "aa7e62ac-ea01-4400-9cf6-c79ce79fb97a",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
          "title": "Testes da funcionalidade produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da funcionalidade produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 208,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "07aa8ed8-d512-4060-b433-fe2061051fc1",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Deve listar todos os produtos cadastrados",
              "fullTitle": "Testes da funcionalidade produtos GET - Deve listar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 106,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/produtos'\n}).then(response => {\n  //expect(response.body.produtos[0].nome).to.equal('Logitech MX Vertical'),\n  expect(response.status).to.equal(200), expect(response.body.produtos[0].nome).not.equal(''), expect(response.body).to.have.property('produtos'), expect(response.duration).to.be.lessThan(100);\n});",
              "err": {},
              "uuid": "f6d470cd-caa7-4350-bdd9-97ec0d30711e",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Cadastrar produto",
              "fullTitle": "Testes da funcionalidade produtos POST - Cadastrar produto",
              "timedOut": null,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.be.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "2515aa34-9d2b-45a8-8712-c936bb4cfae6",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da funcionalidade produtos PUT - Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 115,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//usou comando personalizado para tentar cadastrar um produto novo e fez as validações de que o mesmo ja havia sido cadastrado anteriormente\ncy.cadastrarProduto(token, produto, 100, produto, 10).then(response => {\n  expect(response.status).to.be.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "0f0b0864-af52-46ef-98ea-74369c2ffb5f",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve editar um produto ja cadastrado",
              "fullTitle": "Testes da funcionalidade produtos PUT - Deve editar um produto ja cadastrado",
              "timedOut": null,
              "duration": 131,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\n//faz o get direto no request(''), depois atribui o valor do id do produto 0 do array para variavel para ser usado posteriormente\ncy.request('/produtos').then(response => {\n  cy.log(response.body.produtos[0]._id);\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 220,\n      \"descricao\": produto,\n      \"quantidade\": 10\n    }\n  }).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "03dfebcc-1a9f-47b9-aec3-a49c54cf003f",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Alterar produto cadastrado previamente com comando personalizado",
              "fullTitle": "Testes da funcionalidade produtos PUT - Alterar produto cadastrado previamente com comando personalizado",
              "timedOut": null,
              "duration": 108,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoNovo = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\nlet produto = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\n//Cadastrando produto\ncy.cadastrarProduto(token, produtoNovo, 100, produtoNovo, 10).then(response => {\n  let id = response.body._id;\n  cy.log(response.body._id);\n  cy.request({\n    method: 'PUT',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 220,\n      \"descricao\": produto,\n      \"quantidade\": 10\n    }\n  }).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "1a276100-9d8f-4bf2-9c3e-7ae92bb7e151",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Deve excluir um produto cadastrado e editado anteriormente com comando personalizado",
              "fullTitle": "Testes da funcionalidade produtos DELETE - Deve excluir um produto cadastrado e editado anteriormente com comando personalizado",
              "timedOut": null,
              "duration": 125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoNovo = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produtoNovo, 100, produtoNovo, 10).then(response => {\n  let id = response.body._id;\n  cy.log(response.body._id);\n  cy.deletarProduto(token, id).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "4f8645b7-97e5-48d3-86fa-ba505b178302",
              "parentUUID": "ae1bd351-9fe5-414b-9a3e-2092712229e4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "07aa8ed8-d512-4060-b433-fe2061051fc1",
            "f6d470cd-caa7-4350-bdd9-97ec0d30711e",
            "2515aa34-9d2b-45a8-8712-c936bb4cfae6",
            "0f0b0864-af52-46ef-98ea-74369c2ffb5f",
            "03dfebcc-1a9f-47b9-aec3-a49c54cf003f",
            "1a276100-9d8f-4bf2-9c3e-7ae92bb7e151",
            "4f8645b7-97e5-48d3-86fa-ba505b178302"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 871,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "e3183e44-1dd8-4e86-9098-3bd9232071f3",
      "title": "",
      "fullFile": "cypress\\e2e\\exercicio-api.cy.js",
      "file": "cypress\\e2e\\exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 82,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "39d8b7d4-23d1-4695-b46e-15379d58e047",
              "parentUUID": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 47,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "dea87986-4725-4675-836c-07ae3ab742d3",
              "parentUUID": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 54,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "c6e0354f-4ebc-4ea8-8f82-7b1017f38088",
              "parentUUID": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 65,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "53d223ee-0789-450e-8e64-46418f4541b8",
              "parentUUID": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 63,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "24a8e8e9-dd89-47e4-804b-2991e2af6c9d",
              "parentUUID": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 55,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//TODO:",
              "err": {},
              "uuid": "bac749b6-0eb0-4041-9ce2-e45044d15244",
              "parentUUID": "9ace4826-57fd-4a55-a0ca-d85cec352bf9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39d8b7d4-23d1-4695-b46e-15379d58e047",
            "dea87986-4725-4675-836c-07ae3ab742d3",
            "c6e0354f-4ebc-4ea8-8f82-7b1017f38088",
            "53d223ee-0789-450e-8e64-46418f4541b8",
            "24a8e8e9-dd89-47e4-804b-2991e2af6c9d",
            "bac749b6-0eb0-4041-9ce2-e45044d15244"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 366,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "32c66bde-eaa0-41e3-9952-3bafb23e550f",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51a55641-ba09-4502-834c-115883a8c0a7",
          "title": "Login - Teste da API ServRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login - Teste da API ServRest Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 151,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200), expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "589c04b8-beb7-4e73-94be-6b9741268aa1",
              "parentUUID": "51a55641-ba09-4502-834c-115883a8c0a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "589c04b8-beb7-4e73-94be-6b9741268aa1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 151,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "2da983f2-4b9f-42cb-8e70-d403efdb474e",
      "title": "",
      "fullFile": "cypress\\e2e\\produtos.cy.js",
      "file": "cypress\\e2e\\produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
          "title": "Testes da funcionalidade produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Testes da funcionalidade produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 131,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "c1eeb664-12f7-4434-8b03-3d142707a739",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "GET - Deve listar todos os produtos cadastrados",
              "fullTitle": "Testes da funcionalidade produtos GET - Deve listar todos os produtos cadastrados",
              "timedOut": null,
              "duration": 98,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: '/produtos'\n}).then(response => {\n  //expect(response.body.produtos[0].nome).to.equal('Logitech MX Vertical'),\n  expect(response.status).to.equal(200), expect(response.body.produtos[0].nome).not.equal(''), expect(response.body).to.have.property('produtos'), expect(response.duration).to.be.lessThan(100);\n});",
              "err": {},
              "uuid": "675a9310-8ff1-47f0-a197-97ff12037d76",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "POST - Cadastrar produto",
              "fullTitle": "Testes da funcionalidade produtos POST - Cadastrar produto",
              "timedOut": null,
              "duration": 65,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/produtos',\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto Novo\",\n    \"quantidade\": 100\n  },\n  headers: {\n    authorization: token\n  }\n}).then(response => {\n  expect(response.status).to.be.equal(201), expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "d8691a74-a868-460a-ab2e-f2055fb0f2ca",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Testes da funcionalidade produtos PUT - Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//usou comando personalizado para tentar cadastrar um produto novo e fez as validações de que o mesmo ja havia sido cadastrado anteriormente\ncy.cadastrarProduto(token, produto, 100, produto, 10).then(response => {\n  expect(response.status).to.be.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "56d7ef83-d939-44de-a46f-1510cafc440a",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Deve editar um produto ja cadastrado",
              "fullTitle": "Testes da funcionalidade produtos PUT - Deve editar um produto ja cadastrado",
              "timedOut": null,
              "duration": 123,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\n//faz o get direto no request(''), depois atribui o valor do id do produto 0 do array para variavel para ser usado posteriormente\ncy.request('/produtos').then(response => {\n  cy.log(response.body.produtos[0]._id);\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 220,\n      \"descricao\": produto,\n      \"quantidade\": 10\n    }\n  }).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "01b420d6-066d-45e2-8fb2-99179f90b815",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "PUT - Alterar produto cadastrado previamente com comando personalizado",
              "fullTitle": "Testes da funcionalidade produtos PUT - Alterar produto cadastrado previamente com comando personalizado",
              "timedOut": null,
              "duration": 91,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoNovo = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\nlet produto = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\n//Cadastrando produto\ncy.cadastrarProduto(token, produtoNovo, 100, produtoNovo, 10).then(response => {\n  let id = response.body._id;\n  cy.log(response.body._id);\n  cy.request({\n    method: 'PUT',\n    url: `/produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": 220,\n      \"descricao\": produto,\n      \"quantidade\": 10\n    }\n  }).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "ae84ad69-8b73-4152-93f4-9f3726afa30c",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "DELETE - Deve excluir um produto cadastrado e editado anteriormente com comando personalizado",
              "fullTitle": "Testes da funcionalidade produtos DELETE - Deve excluir um produto cadastrado e editado anteriormente com comando personalizado",
              "timedOut": null,
              "duration": 92,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produtoNovo = `Produto Ebac ${Math.floor(Math.random() * 1000000)}`;\ncy.cadastrarProduto(token, produtoNovo, 100, produtoNovo, 10).then(response => {\n  let id = response.body._id;\n  cy.log(response.body._id);\n  cy.deletarProduto(token, id).then(response => {\n    expect(response.status).to.be.equal(200), expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "59399341-ecef-40ea-ae80-9b44be982317",
              "parentUUID": "c32bad80-3b25-448d-92b1-b5aab4cbf9d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c1eeb664-12f7-4434-8b03-3d142707a739",
            "675a9310-8ff1-47f0-a197-97ff12037d76",
            "d8691a74-a868-460a-ab2e-f2055fb0f2ca",
            "56d7ef83-d939-44de-a46f-1510cafc440a",
            "01b420d6-066d-45e2-8fb2-99179f90b815",
            "ae84ad69-8b73-4152-93f4-9f3726afa30c",
            "59399341-ecef-40ea-ae80-9b44be982317"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 678,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5942615b-e14b-4b58-b2fb-626ad75e0b1c",
      "title": "",
      "fullFile": "cypress\\e2e\\login.cy.js",
      "file": "cypress\\e2e\\login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b38ab57-cf53-4f7d-a012-cc066229603f",
          "title": "Login - Teste da API ServRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login - Teste da API ServRest Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 210,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200), expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "f34aa894-e9dc-4db8-b3a6-e253bc59e256",
              "parentUUID": "0b38ab57-cf53-4f7d-a012-cc066229603f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f34aa894-e9dc-4db8-b3a6-e253bc59e256"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 210,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}